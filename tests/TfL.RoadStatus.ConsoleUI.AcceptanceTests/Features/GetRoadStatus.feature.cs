// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TfL.RoadStatus.ConsoleUI.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("GetRoadStatus")]
    public partial class GetRoadStatusFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GetRoadStatus.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GetRoadStatus", "Returns the Road Status for one or more specified major roads using real TfL open" +
                    " data feeds.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OutputsRoadDisplayName")]
        [NUnit.Framework.CategoryAttribute("HappyPath")]
        [NUnit.Framework.TestCaseAttribute("A1", "A1", null)]
        [NUnit.Framework.TestCaseAttribute("A10", "A10", null)]
        [NUnit.Framework.TestCaseAttribute("A12", "A12", null)]
        [NUnit.Framework.TestCaseAttribute("A13", "A13", null)]
        [NUnit.Framework.TestCaseAttribute("A2", "A2", null)]
        [NUnit.Framework.TestCaseAttribute("A20", "A20", null)]
        [NUnit.Framework.TestCaseAttribute("A205", "South Circular (A205)", null)]
        [NUnit.Framework.TestCaseAttribute("A21", "A21", null)]
        [NUnit.Framework.TestCaseAttribute("A23", "A23", null)]
        [NUnit.Framework.TestCaseAttribute("A24", "A24", null)]
        [NUnit.Framework.TestCaseAttribute("A3", "A3", null)]
        [NUnit.Framework.TestCaseAttribute("A316", "A316", null)]
        [NUnit.Framework.TestCaseAttribute("A4", "A4", null)]
        [NUnit.Framework.TestCaseAttribute("A40", "A40", null)]
        [NUnit.Framework.TestCaseAttribute("A406", "North Circular (A406)", null)]
        [NUnit.Framework.TestCaseAttribute("A41", "A41", null)]
        [NUnit.Framework.TestCaseAttribute("bishopsgate%20cross%20route", "Bishopsgate Cross Route", null)]
        [NUnit.Framework.TestCaseAttribute("blackwall%20tunnel", "Blackwall Tunnel", null)]
        [NUnit.Framework.TestCaseAttribute("city%20route", "City Route", null)]
        [NUnit.Framework.TestCaseAttribute("farringdon%20cross%20route", "Farringdon Cross Route", null)]
        [NUnit.Framework.TestCaseAttribute("inner%20ring", "Inner Ring", null)]
        [NUnit.Framework.TestCaseAttribute("southern%20river%20route", "Southern River Route", null)]
        [NUnit.Framework.TestCaseAttribute("western%20cross%20route", "Western Cross Route", null)]
        public virtual void OutputsRoadDisplayName(string roadID, string displayName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "HappyPath"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("roadID", roadID);
            argumentsOfScenario.Add("displayName", displayName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OutputsRoadDisplayName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 11
 testRunner.Given(string.Format("a valid roadID {0} is specified", roadID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.When("the client is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then(string.Format("the road displayName {0} should be displayed", displayName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OutputsRoadStatusSeverity")]
        [NUnit.Framework.TestCaseAttribute("A1", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A10", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A12", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A13", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A2", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A20", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A205", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A21", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A23", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A24", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A3", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A316", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A4", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A40", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A406", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A41", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("bishopsgate%20cross%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("blackwall%20tunnel", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("city%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("farringdon%20cross%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("inner%20ring", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("southern%20river%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("western%20cross%20route", "regex not empty", null)]
        public virtual void OutputsRoadStatusSeverity(string roadID, string statusSeverity, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("roadID", roadID);
            argumentsOfScenario.Add("statusSeverity", statusSeverity);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OutputsRoadStatusSeverity", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
 testRunner.Given(string.Format("a valid roadID {0} is specified", roadID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 44
 testRunner.When("the client is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 45
 testRunner.Then(string.Format("the road statusSeverity {0} should be displayed", statusSeverity), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OutputsRoadStatusSeverityDescription")]
        [NUnit.Framework.TestCaseAttribute("A1", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A10", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A12", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A13", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A2", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A20", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A205", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A21", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A23", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A24", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A3", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A316", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A4", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A40", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A406", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("A41", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("bishopsgate%20cross%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("blackwall%20tunnel", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("city%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("farringdon%20cross%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("inner%20ring", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("southern%20river%20route", "regex not empty", null)]
        [NUnit.Framework.TestCaseAttribute("western%20cross%20route", "regex not empty", null)]
        public virtual void OutputsRoadStatusSeverityDescription(string roadID, string statusSeverityDescription, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("roadID", roadID);
            argumentsOfScenario.Add("statusSeverityDescription", statusSeverityDescription);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OutputsRoadStatusSeverityDescription", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
 testRunner.Given(string.Format("a valid roadID {0} is specified", roadID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 76
 testRunner.When("the client is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then(string.Format("the road statusSeverityDescription {0} should be displayed", statusSeverityDescription), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("OutputsInformativeErrors")]
        [NUnit.Framework.TestCaseAttribute("", "TfL.RoadStatus.ConsoleUI 1.0.0", null)]
        [NUnit.Framework.TestCaseAttribute("RoadWithoutTraffic", "RoadWithoutTraffic is not a valid road", null)]
        public virtual void OutputsInformativeErrors(string roadID, string error, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("roadID", roadID);
            argumentsOfScenario.Add("error", error);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("OutputsInformativeErrors", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 107
 testRunner.Given(string.Format("an invalid roadID {0} is specified", roadID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
 testRunner.When("the client is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 109
 testRunner.Then(string.Format("the application should return an informative error {0}", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("TerminatesWithNonZeroExitCode")]
        [NUnit.Framework.TestCaseAttribute("", "2", null)]
        [NUnit.Framework.TestCaseAttribute("RoadWithoutTraffic", "1", null)]
        public virtual void TerminatesWithNonZeroExitCode(string roadID, string errorCode, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("roadID", roadID);
            argumentsOfScenario.Add("errorCode", errorCode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("TerminatesWithNonZeroExitCode", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 117
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 118
 testRunner.Given(string.Format("an invalid roadID {0} is specified", roadID), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
 testRunner.When("the client is run", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 120
 testRunner.Then(string.Format("the application should exit with a non-zero System Error code {0}", errorCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
