//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Tfl.RoadStatus.Domain;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace Tfl.RoadStatus.Application.Interfaces
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerAccidentStatsClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all accident details for accidents occuring in the specified year</summary>
        /// <param name="year">The year for which to filter the accidents on.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccidentDetail>> GetAsync(int year, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerAirQualityClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets air quality data feed</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerBikePointClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces
        /// <br/>            numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the bike point with the given id.</summary>
        /// <param name="id">A bike point id (a list of ids can be obtained from the above BikePoint call)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Place> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for bike stations by their name, a bike point's name often contains information about the name of the street
        /// <br/>            or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status
        /// <br/>            or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.</summary>
        /// <param name="query">The search term e.g. "St. James"</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> SearchAsync(string query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerCabwiseClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets taxis and minicabs contact information</summary>
        /// <param name="lat">Latitude</param>
        /// <param name="lon">Longitude</param>
        /// <param name="optype">Operator Type e.g Minicab, Executive, Limousine</param>
        /// <param name="wc">Wheelchair accessible</param>
        /// <param name="radius">The radius of the bounding circle in metres</param>
        /// <param name="name">Trading name of operating company</param>
        /// <param name="maxResults">An optional parameter to limit the number of results return. Default and maximum is 20.</param>
        /// <param name="legacyFormat">Legacy Format</param>
        /// <param name="forceXml">Force Xml</param>
        /// <param name="twentyFourSevenOnly">Twenty Four Seven Only</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetAsync(double lat, double lon, string optype = null, string wc = null, double? radius = null, string name = null, int? maxResults = null, bool? legacyFormat = null, bool? forceXml = null, bool? twentyFourSevenOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerJourneyClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of all of the available journey planner modes</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Mode>> MetaAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Perform a Journey Planner search from the parameters specified in simple types</summary>
        /// <param name="from">Origin of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="to">Destination of the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="via">Travel through point on the journey. Can be WGS84 coordinates expressed as "lat,long", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).</param>
        /// <param name="nationalSearch">Does the journey cover stops outside London? eg. "nationalSearch=true"</param>
        /// <param name="date">The date must be in yyyyMMdd format</param>
        /// <param name="time">The time must be in HHmm format</param>
        /// <param name="timeIs">Does the time given relate to arrival or leaving time? Possible options: "departing" | "arriving"</param>
        /// <param name="journeyPreference">The journey preference eg possible options: "leastinterchange" | "leasttime" | "leastwalking"</param>
        /// <param name="mode">The mode must be a comma separated list of modes. eg possible options: "public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle"</param>
        /// <param name="accessibilityPreference">The accessibility preference must be a comma separated list eg. "noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform"</param>
        /// <param name="fromName">An optional name to associate with the origin of the journey in the results.</param>
        /// <param name="toName">An optional name to associate with the destination of the journey in the results.</param>
        /// <param name="viaName">An optional name to associate with the via point of the journey in the results.</param>
        /// <param name="maxTransferMinutes">The max walking time in minutes for transfer eg. "120"</param>
        /// <param name="maxWalkingMinutes">The max walking time in minutes for journeys eg. "120"</param>
        /// <param name="walkingSpeed">The walking speed. eg possible options: "slow" | "average" | "fast".</param>
        /// <param name="cyclePreference">The cycle preference. eg possible options: "allTheWay" | "leaveAtStation" | "takeOnTransport" | "cycleHire"</param>
        /// <param name="adjustment">Time adjustment command. eg possible options: "TripFirst" | "TripLast"</param>
        /// <param name="bikeProficiency">A comma separated list of cycling proficiency levels. eg possible options: "easy,moderate,fast"</param>
        /// <param name="alternativeCycle">Option to determine whether to return alternative cycling journey</param>
        /// <param name="alternativeWalking">Option to determine whether to return alternative walking journey</param>
        /// <param name="applyHtmlMarkup">Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.</param>
        /// <param name="useMultiModalCall">A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey</param>
        /// <param name="walkingOptimization">A boolean to indicate whether to optimize journeys using walking</param>
        /// <param name="taxiOnlyTrip">A boolean to indicate whether to return one or more taxi journeys. Note, setting this to true will override "useMultiModalCall".</param>
        /// <param name="routeBetweenEntrances">A boolean to indicate whether public transport routes should include directions between platforms and station entrances.</param>
        /// <param name="useRealTimeLiveArrivals">A boolean to indicate if we want to receive real time live arrivals data where available.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ItineraryResult> JourneyResultsAsync(string from, string to, string via = null, bool? nationalSearch = null, string date = null, string time = null, TimeIs? timeIs = null, JourneyPreference? journeyPreference = null, System.Collections.Generic.IEnumerable<string> mode = null, System.Collections.Generic.IEnumerable<Anonymous> accessibilityPreference = null, string fromName = null, string toName = null, string viaName = null, string maxTransferMinutes = null, string maxWalkingMinutes = null, WalkingSpeed? walkingSpeed = null, CyclePreference? cyclePreference = null, string adjustment = null, System.Collections.Generic.IEnumerable<Anonymous2> bikeProficiency = null, bool? alternativeCycle = null, bool? alternativeWalking = null, bool? applyHtmlMarkup = null, bool? useMultiModalCall = null, bool? walkingOptimization = null, bool? taxiOnlyTrip = null, bool? routeBetweenEntrances = null, bool? useRealTimeLiveArrivals = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerLineClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of valid modes</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Mode>> MetaModesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of valid severity codes</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatusSeverity>> MetaSeverityAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of valid disruption categories</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaDisruptionCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of valid ServiceTypes to filter on</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaServiceTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets lines that match the specified line ids.</summary>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> GetAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets lines that serve the given modes.</summary>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> GetByModeAsync(System.Collections.Generic.IEnumerable<string> modes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.</summary>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> RouteAsync(System.Collections.Generic.IEnumerable<Anonymous3> serviceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.</summary>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> LineRoutesByIdsAsync(System.Collections.Generic.IEnumerable<string> ids, System.Collections.Generic.IEnumerable<Anonymous4> serviceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route</summary>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> RouteByModeAsync(System.Collections.Generic.IEnumerable<string> modes, System.Collections.Generic.IEnumerable<Anonymous5> serviceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all valid routes for given line id, including the sequence of stops on each route.</summary>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <param name="excludeCrowding">That excludes crowding from line disruptions. Can be true or false.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RouteSequence> RouteSequenceAsync(string id, Direction direction, System.Collections.Generic.IEnumerable<Anonymous6> serviceTypes = null, bool? excludeCrowding = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the line status for given line ids during the provided dates e.g Minor Delays</summary>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> StatusAsync(System.Collections.Generic.IEnumerable<string> ids, string startDate, string endDate, bool? detail = null, System.DateTimeOffset? dateRange_startDate = null, System.DateTimeOffset? dateRange_endDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the line status of for given line ids e.g Minor Delays</summary>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> StatusByIdsAsync(System.Collections.Generic.IEnumerable<string> ids, bool? detail = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search for lines or routes matching the query string</summary>
        /// <param name="query">Search term e.g victoria</param>
        /// <param name="modes">Optionally filter by the specified modes</param>
        /// <param name="serviceTypes">A comma seperated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RouteSearchResponse> SearchAsync(string query, System.Collections.Generic.IEnumerable<string> modes = null, System.Collections.Generic.IEnumerable<Anonymous7> serviceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the line status for all lines with a given severity
        /// <br/>            A list of valid severity codes can be obtained from a call to Line/Meta/Severity</summary>
        /// <param name="severity">The level of severity (eg: a number from 0 to 14)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> StatusBySeverityAsync(int severity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the line status of for all lines for the given modes</summary>
        /// <param name="modes">A comma-separated list of modes to filter by. e.g. tube,dlr</param>
        /// <param name="detail">Include details of the disruptions that are causing the line status including the affected stops and routes</param>
        /// <param name="severityLevel">If specified, ensures that only those line status(es) are returned within the lines that have disruptions with the matching severity level.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Line>> StatusByModeAsync(System.Collections.Generic.IEnumerable<string> modes, bool? detail = null, string severityLevel = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of the stations that serve the given line id</summary>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail line is requested, this flag will filter the national rail stations so that only those operated by TfL are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> StopPointsAsync(string id, bool? tflOperatedNationalRailStationsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the timetable for a specified station on the give line</summary>
        /// <param name="fromStopPointId">The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimetableResponse> TimetableAsync(string fromStopPointId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the timetable for a specified station on the give line with specified destination</summary>
        /// <param name="fromStopPointId">The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="id">A single line id e.g. victoria</param>
        /// <param name="toStopPointId">The destination stations's Naptan code</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimetableResponse> TimetableToAsync(string fromStopPointId, string id, string toStopPointId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get disruptions for the given line ids</summary>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Disruption>> DisruptionAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get disruptions for all lines of the given modes.</summary>
        /// <param name="modes">A comma-separated list of modes e.g. tube,dlr</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Disruption>> DisruptionByModeAsync(System.Collections.Generic.IEnumerable<string> modes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the list of arrival predictions for given line ids based at the given stop</summary>
        /// <param name="ids">A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.</param>
        /// <param name="stopPointId">Optional. Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="direction">Optional. The direction of travel. Can be inbound or outbound or all. If left blank, and destinationStopId is set, will default to all</param>
        /// <param name="destinationStationId">Optional. Id of destination stop</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Prediction>> ArrivalsAsync(System.Collections.Generic.IEnumerable<string> ids, string stopPointId, Direction2? direction = null, string destinationStationId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerModeClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the service type active for a mode.
        /// <br/>            Currently only supports tube</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ActiveServiceType>> GetActiveServiceTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the next arrival predictions for all stops of a given mode</summary>
        /// <param name="mode">A mode name e.g. tube, dlr</param>
        /// <param name="count">A number of arrivals to return for each stop, -1 to return all available.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Prediction>> ArrivalsAsync(string mode, int? count = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerOccupancyClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the occupancy for a car park with a given id</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CarParkOccupancy> GetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the occupancy for all car parks that have occupancy data</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CarParkOccupancy>> GetAllAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the occupancy for a charge connectors with a given id (sourceSystemPlaceId)</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChargeConnectorOccupancy>> GetChargeConnectorStatusAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the occupancy for all charge connectors</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ChargeConnectorOccupancy>> GetAllChargeConnectorStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the occupancy for bike points.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BikePointOccupancy>> GetBikePointsOccupanciesAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerPlaceClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of all of the available place property categories and keys.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlaceCategory>> MetaCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of the available types of Place.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PlaceCategory>> MetaPlaceTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the set of streets associated with a post code.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetStreetsByPostCodeAsync(string postcode, string postcodeInput_postcode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all places of a given type</summary>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.
        /// <br/>            A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> GetByTypeAsync(System.Collections.Generic.IEnumerable<string> types, bool? activeOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the place with the given id.</summary>
        /// <param name="id">The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> GetAsync(string id, bool? includeChildren = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the places that lie within a geographic region. The geographic region of interest can either be specified
        /// <br/>            by using a lat/lon geo-point and a radius in metres to return places within the locus defined by the lat/lon of
        /// <br/>            its centre or alternatively, by the use of a bounding box defined by the lat/lon of its north-west and south-east corners.
        /// <br/>            Optionally filters on type and can strip properties for a smaller payload.</summary>
        /// <param name="radius">The radius of the bounding circle in metres when only lat/lon are specified.</param>
        /// <param name="categories">An optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)</param>
        /// <param name="includeChildren">Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned</param>
        /// <param name="type">Place types to filter on, or null to return all types</param>
        /// <param name="activeOnly">An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)</param>
        /// <param name="numberOfPlacesToReturn">If specified, limits the number of returned places equal to the given value</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> GetByGeoAsync(double? radius = null, System.Collections.Generic.IEnumerable<string> categories = null, bool? includeChildren = null, System.Collections.Generic.IEnumerable<string> type = null, bool? activeOnly = null, int? numberOfPlacesToReturn = null, double? placeGeo_swLat = null, double? placeGeo_swLon = null, double? placeGeo_neLat = null, double? placeGeo_neLon = null, double? placeGeo_lat = null, double? placeGeo_lon = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place
        /// <br/>            must be polygonal e.g. a BoroughBoundary.</summary>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetAtAsync(System.Collections.Generic.IEnumerable<string> type, string lat, string lon, double location_lat, double location_lon, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the place overlay for a given set of co-ordinates and a given width/height.</summary>
        /// <param name="z">The zoom level</param>
        /// <param name="type">The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetOverlayAsync(int z, System.Collections.Generic.IEnumerable<string> type, int width, int height, string lat, string lon, double location_lat, double location_lon, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all places that matches the given query</summary>
        /// <param name="name">The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.</param>
        /// <param name="types">A comma-separated list of the types to return. Max. approx 12 types.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> SearchAsync(string name, System.Collections.Generic.IEnumerable<string> types = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerRoadClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all roads managed by TfL</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoadCorridor>> GetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the road with the specified id (e.g. A1)</summary>
        /// <param name="ids">Comma-separated list of road identifiers e.g. "A406, A2" (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoadCorridor>> Get2Async(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.</summary>
        /// <param name="ids">Comma-separated list of road identifiers e.g. "A406, A2" or use "all" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoadCorridor>> StatusAsync(System.Collections.Generic.IEnumerable<string> ids, System.DateTimeOffset? dateRangeNullable_startDate = null, System.DateTimeOffset? dateRangeNullable_endDate = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get active disruptions, filtered by road ids</summary>
        /// <param name="ids">Comma-separated list of road identifiers e.g. "A406, A2" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets</param>
        /// <param name="severities">an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)</param>
        /// <param name="categories">an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)</param>
        /// <param name="closures">Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoadDisruption>> DisruptionAsync(System.Collections.Generic.IEnumerable<string> ids, bool? stripContent = null, System.Collections.Generic.IEnumerable<string> severities = null, System.Collections.Generic.IEnumerable<string> categories = null, bool? closures = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.</summary>
        /// <param name="startDate">Optional, the start time to filter on.</param>
        /// <param name="endDate">Optional, The end time to filter on.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> DisruptedStreetsAsync(System.DateTimeOffset startDate, System.DateTimeOffset endDate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of active disruptions filtered by disruption Ids.</summary>
        /// <param name="disruptionIds">Comma-separated list of disruption identifiers to filter by.</param>
        /// <param name="stripContent">Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoadDisruption> DisruptionByIdAsync(System.Collections.Generic.IEnumerable<string> disruptionIds, bool? stripContent = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of valid RoadDisruption categories</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of valid RoadDisruption severity codes</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatusSeverity>> MetaSeveritiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerSearchClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size
        /// <br/>            of 100. To return subsequent pages, use the paginated overload.</summary>
        /// <param name="query">The search query</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResponse> GetAsync(string query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Searches the bus schedules folder on S3 for a given bus number.</summary>
        /// <param name="query">The search query</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResponse> BusSchedulesAsync(string query, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the available searchProvider names.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaSearchProvidersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the available search categories.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the available sorting options.</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaSortsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerStopPointClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the list of available StopPoint additional information categories</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPointCategory>> MetaCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the list of available StopPoint types</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> MetaStopTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the list of available StopPoint modes</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Mode>> MetaModesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of StopPoints corresponding to the given list of stop ids.</summary>
        /// <param name="ids">A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.
        /// <br/>            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="includeCrowdingData">Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> GetAsync(System.Collections.Generic.IEnumerable<string> ids, bool? includeCrowdingData = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a list of places corresponding to a given id and place types.</summary>
        /// <param name="id">A naptan id for a stop point (station naptan code e.g. 940GZZLUASL).</param>
        /// <param name="placeTypes">A comcomma-separated value representing the place types.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> Get2Async(string id, System.Collections.Generic.IEnumerable<string> placeTypes, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.</summary>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="line">A particular line e.g. victoria, circle, northern etc.</param>
        /// <param name="direction">The direction of travel. Can be inbound or outbound.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> CrowdingAsync(string id, string line, Direction3 direction, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all stop points of a given type</summary>
        /// <param name="types">A comma-separated list of the types to return. Max. approx. 12 types. 
        /// <br/>            A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> GetByTypeAsync(System.Collections.Generic.IEnumerable<string> types, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all the stop points of given type(s) with a page number</summary>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> GetByTypeWithPaginationAsync(System.Collections.Generic.IEnumerable<string> types, int page, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the service types for a given stoppoint</summary>
        /// <param name="id">The Naptan id of the stop</param>
        /// <param name="lineIds">The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)</param>
        /// <param name="modes">The modes which the lines are relevant to (all if empty)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<LineServiceType>> GetServiceTypesAsync(string id, System.Collections.Generic.IEnumerable<string> lineIds = null, System.Collections.Generic.IEnumerable<string> modes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the list of arrival predictions for the given stop point id</summary>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Prediction>> ArrivalsAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the list of arrival and departure predictions for the given stop point id (overground, tfl rail and thameslink only)</summary>
        /// <param name="id">A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineIds">A comma-separated list of line ids e.g. tfl-rail, london-overground, thameslink</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ArrivalDeparture>> ArrivalDeparturesAsync(string id, System.Collections.Generic.IEnumerable<string> lineIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets Stopoints that are reachable from a station/line combination.</summary>
        /// <param name="id">The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by</param>
        /// <param name="lineId">Line id of the line to filter by (e.g. victoria)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPoint>> ReachableFromAsync(string id, string lineId, System.Collections.Generic.IEnumerable<Anonymous8> serviceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the route sections for all the lines that service the given stop point ids</summary>
        /// <param name="id">A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="serviceTypes">A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StopPointRouteSection>> RouteAsync(string id, System.Collections.Generic.IEnumerable<Anonymous9> serviceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a distinct list of disrupted stop points for the given modes</summary>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DisruptedPoint>> DisruptionByModeAsync(System.Collections.Generic.IEnumerable<string> modes, bool? includeRouteBlockedStops = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.</summary>
        /// <param name="ids">A comma-seperated list of stop point ids. Max. approx. 20 ids.
        /// <br/>            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.</param>
        /// <param name="getFamily">Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.</param>
        /// <param name="flattenResponse">Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DisruptedPoint>> DisruptionAsync(System.Collections.Generic.IEnumerable<string> ids, bool? getFamily = null, bool? includeRouteBlockedStops = null, bool? flattenResponse = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns the canonical direction, "inbound" or "outbound", for a given pair of stop point Ids in the direction from -&amp;gt; to.</summary>
        /// <param name="id">Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="toStopPointId">Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)</param>
        /// <param name="lineId">Optional line id filter e.g. victoria</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> DirectionAsync(string id, string toStopPointId, string lineId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of StopPoints within {radius} by the specified criteria</summary>
        /// <param name="stopTypes">a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)</param>
        /// <param name="radius">the radius of the bounding circle in metres (default : 200)</param>
        /// <param name="useStopPointHierarchy">Re-arrange the output into a parent/child hierarchy</param>
        /// <param name="modes">the list of modes to search (comma separated mode names e.g. tube,dlr)</param>
        /// <param name="categories">an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword "none" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)</param>
        /// <param name="returnLines">true to return the lines that each stop point serves as a nested resource</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPointsResponse> GetByGeoPointAsync(System.Collections.Generic.IEnumerable<string> stopTypes, double location_lat, double location_lon, int? radius = null, bool? useStopPointHierarchy = null, System.Collections.Generic.IEnumerable<string> modes = null, System.Collections.Generic.IEnumerable<string> categories = null, bool? returnLines = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of StopPoints filtered by the modes available at that StopPoint.</summary>
        /// <param name="modes">A comma-seperated list of modes e.g. tube,dlr</param>
        /// <param name="page">The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StopPointsResponse> GetByModeAsync(System.Collections.Generic.IEnumerable<string> modes, int? page = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.</summary>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station.</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
        /// <br/>            it is possible that the flattened result set will contain more than 50 items.</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by</param>
        /// <param name="includeHubs">If true, returns results including HUBs.</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResponse> SearchAsync(string query, System.Collections.Generic.IEnumerable<string> modes = null, bool? faresOnly = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.</summary>
        /// <param name="query">The query string, case-insensitive. Leading and trailing wildcards are applied automatically.</param>
        /// <param name="modes">An optional, parameter separated list of the modes to filter by</param>
        /// <param name="faresOnly">True to only return stations in that have Fares data available for single fares to another station.</param>
        /// <param name="maxResults">An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,
        /// <br/>            it is possible that the flattened result set will contain more than 50 items.</param>
        /// <param name="lines">An optional, parameter separated list of the lines to filter by</param>
        /// <param name="includeHubs">If true, returns results including HUBs.</param>
        /// <param name="tflOperatedNationalRailStationsOnly">If the national-rail mode is included, this flag will filter the national rail stations so that only those operated by TfL are returned</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResponse> Search2Async(string query, System.Collections.Generic.IEnumerable<string> modes = null, bool? faresOnly = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> lines = null, bool? includeHubs = null, bool? tflOperatedNationalRailStationsOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a StopPoint for a given sms code.</summary>
        /// <param name="id">A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.</param>
        /// <param name="output">If set to "web", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetBySmsAsync(string id, string output = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a list of taxi ranks corresponding to the given stop point id.</summary>
        /// <param name="stopPointId">stopPointId is required to get the taxi ranks.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> GetTaxiRanksByIdsAsync(string stopPointId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get car parks corresponding to the given stop point id.</summary>
        /// <param name="stopPointId">stopPointId is required to get the car parks.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Place>> GetCarParksByIdAsync(string stopPointId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerTravelTimeClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the TravelTime overlay.</summary>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetOverlayAsync(int z, double pinLat, double pinLon, double mapCenterLat, double mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int width, int height, Direction4 direction, int travelTimeInterval, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the TravelTime overlay.</summary>
        /// <param name="z">The zoom level.</param>
        /// <param name="pinLat">The latitude of the pin.</param>
        /// <param name="pinLon">The longitude of the pin.</param>
        /// <param name="mapCenterLat">The map center latitude.</param>
        /// <param name="mapCenterLon">The map center longitude.</param>
        /// <param name="scenarioTitle">The title of the scenario.</param>
        /// <param name="timeOfDayId">The id for the time of day (AM/INTER/PM)</param>
        /// <param name="modeId">The id of the mode.</param>
        /// <param name="width">The width of the requested overlay.</param>
        /// <param name="height">The height of the requested overlay.</param>
        /// <param name="direction">The direction of travel.</param>
        /// <param name="travelTimeInterval">The total minutes between the travel time bands</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Object> GetCompareOverlayAsync(int z, double pinLat, double pinLon, double mapCenterLat, double mapCenterLon, string scenarioTitle, string timeOfDayId, string modeId, int width, int height, Direction5 direction, int travelTimeInterval, string compareType, string compareValue, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISwaggerVehicleClient
    {
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the predictions for a given list of vehicle Id's.</summary>
        /// <param name="ids">A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Prediction>> GetAsync(System.Collections.Generic.IEnumerable<string> ids, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the Emissions Surcharge compliance for the Vehicle</summary>
        /// <param name="vrm">The Vehicle Registration Mark</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleMatch> GetEmissionsSurchargeComplianceAsync(string vrm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the Ulez Surcharge compliance for the Vehicle</summary>
        /// <param name="vrm">The Vehicle Registration Mark</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VehicleMatch> GetUlezComplianceAsync(string vrm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    
    }

    

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016